/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pathfinder;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;

/**
 *
 * @author grzala
 */
public class Canvas extends javax.swing.JPanel {

    public static enum Mode {
        PAN,
        SETSTART,
        SETGOAL,
    }
    
    Point origin, mousept;
    private BufferedImage background;
    private int pointsize = 5;
   
    private Mode mode;
    private Color[] pathColors;
    
    //toDraw
    public ArrayList<ArrayList<Point>> lines;
    public ArrayList<Point> goals;
    public ArrayList<Point> additional;
    public Point start;
    public int[] boardSize;
    public double[] times;
    
    public Canvas() {
        initComponents();
        setIgnoreRepaint(true);
        background = null;
        
        lines = new ArrayList<>();
        goals = new ArrayList<>();
        additional = new ArrayList<>();
        start = new Point();
        boardSize = new int[2];
        times = new double[2];
        
        origin  = new Point(0, 0);
        mousept = new Point();
        pathColors = new Color[] {
            new Color(180, 60, 240), //purple
            new Color(20, 150, 0), //green
            new Color(90, 20, 5), //brown
        };
    }
    
    public void setMode(Mode m) {
        mode = m;
    }
    
    public Mode getMode() {
        return mode;
    }
    
    public Point getOrigin() {
        return origin;
    }
    
    public void setImage(String path) {
        if (path == null || path.equals("")) {
            background = null;
        } else {
            try {                
              background = ImageIO.read(new File(path));
            } catch (IOException ex) {}
        }
        
        repaint();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 
        
        //image
        if (background != null) {
            g2d.drawImage(background, origin.x, origin.y, this);
        }
        
        //start
        g2d.setColor(Color.RED);
        g2d.fillOval(origin.x + (start.x-(pointsize/2)), origin.y + (start.y-(pointsize/2)), pointsize, pointsize);
        g2d.drawString("x: " + start.x + " y: " + start.y, origin.x + start.x + 5, origin.y + start.y + 10);
        
        //goals
        for(Point p : goals) {
            g2d.setColor(Color.BLUE);
            int r = pointsize;
            g2d.fillOval(origin.x + (p.x-(r/2)), origin.y + (p.y-(r/2)), r, r);
            g2d.drawString("x: " + p.x + " y: " + p.y, origin.x + p.x + 5, origin.y + p.y + 10);
        }
        
        //additional
        for(Point p : additional) {
            g2d.setColor(Color.CYAN);
            int r = pointsize;
            g2d.fillOval(origin.x + (p.x-(r/2)), origin.y + (p.y-(r/2)), r, r);
            //g2d.drawString("x: " + p.x + " y: " + p.y, origin.x + p.x + 5, origin.y + p.y + 10);
        }
        
        //paths
        int colorIndex = 0;
        //g2d.setStroke(new BasicStroke(2));
        for (ArrayList<Point> line : lines) {
            g2d.setColor(pathColors[colorIndex++]);
            if (colorIndex >= pathColors.length) colorIndex = 0;
            
            for (int i = 0; i < line.size()-1; i++) {
                Point p1 = line.get(i);
                Point p2 = line.get(i+1);
                g2d.drawLine(origin.x + p1.x, origin.y + p1.y, origin.x + p2.x, origin.y + p2.y);
            }
        }
        //g2d.setStroke(new BasicStroke(1));
        
        g2d.setColor(Color.BLACK);
        float totalDistance = Navigator.calculateTotalDistance(lines);
        g2d.drawString("Total distance: " + totalDistance + "px", 10, 20);
        g2d.drawString("Graph search time: " + times[0] + "ms", 10, 35);
        g2d.drawString("Average path search time: " + times[1] + "ms", 10, 50);
        
        
        Dimension d = getSize();
        g2d.setColor(Color.RED);
        int w = boardSize[0]; int h = boardSize[1];
        g2d.drawRect(origin.x, origin.y, w-1, h-1);
        
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (mode == Mode.PAN) {
            int dx = evt.getX() - mousept.x;
            int dy = evt.getY() - mousept.y;
            origin.setLocation(origin.x + dx, origin.y + dy);
            mousept = evt.getPoint();
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        mousept = evt.getPoint();
    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
